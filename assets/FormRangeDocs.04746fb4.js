import{c as e,m,o as c,t as s}from"./index.582e0ce8.js";import{M as p}from"./index.d1cbc7e5.js";import{E as r}from"./Example.a02acc5e.js";import{G as h}from"./GithubSource.41fdda6d.js";import{F as a}from"./Form.35c0a4aa.js";import"./Card.c0b7ce42.js";import"./FormControl.06e52e9e.js";import"./Layout.0428c52c.js";const u=s('<p class="lead"></p>'),g=s('<div class="row gy-5 pt-3"></div>'),f=s(`<table class="bg-white mb-0 table table-striped table-bordered"><thead><tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>disabled </td><td><div>boolean</div></td><td></td><td><div><p>Make the control disabled</p></div></td></tr>
<tr><td>id </td><td><div>string</div></td><td></td><td><div><p>Uses <code>controlId</code> from <code>&lt;FormGroup></code> if not explicitly specified.</p></div></td></tr>
<tr><td>onChange </td><td><div>function</div></td><td></td><td><div><p>A callback fired when the <code>value</code> prop changes</p></div></td></tr>
<tr><td>value </td><td><div>string | arrayOf | number</div></td><td></td><td><div class="mb-2"><small><em class="text-info"><span>controlled by: <code>onChange</code>, initial prop: <code>defaultValue</code></span></em></small></div><div><p>The <code>value</code> attribute of underlying input</p></div></td></tr>
<tr><td>bsPrefix </td><td><div>string</div></td><td><code>form-range</code></td><td><div><p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p></div></td></tr></tbody></table>`);function C(o={}){const{wrapper:i}=Object.assign({},p(),o.components);return i?e(i,m(o,{get children(){return e(l,{})}})):l();function l(){const t=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre",span:"span",h2:"h2",h3:"h3"},p(),o.components);return r||n("Example",!1),r.Code||n("Example.Code",!0),r.Intro||n("Example.Intro",!0),r.Preview||n("Example.Preview",!0),a||n("Form",!1),a.Label||n("Form.Label",!0),a.Range||n("Form.Range",!0),[e(h,{name:"FormRangeDocs.mdx"}),`
`,e(t.h1,{children:"Range"}),`
`,(()=>{const d=u.cloneNode(!0);return c(d,e(t.p,{children:"Use our custom range inputs for consistent cross-browser styling and built-in customization."})),d})(),`
`,(()=>{const d=g.cloneNode(!0);return c(d,e(r,{title:"Example",get children(){return[e(r.Intro,{get children(){return e(t.p,{get children(){return["Create custom ",e(t.code,{children:'<input type="range">'})," controls with ",e(t.code,{children:"<FormRange>"}),`. The track\r
(the background) and thumb (the value) are both styled to appear the same\r
across browsers. As only Firefox supports \u201Cfilling\u201D their track from the left\r
or right of the thumb as a means to visually indicate progress, we do not\r
currently support it.`]}})}}),e(r.Preview,{get children(){return[e(a.Label,{children:"Range"}),e(a.Range,{})]}}),e(r.Code,{get children(){return e(t.pre,{get children(){return e(t.code,{className:"hljs language-js",get children(){return["<",e(t.span,{className:"hljs-title class_",children:"Form"}),".",e(t.span,{className:"hljs-property",children:"Label"}),">",e(t.span,{className:"hljs-title class_",children:"Range"}),"</",e(t.span,{className:"hljs-title class_",children:"Form"}),".",e(t.span,{className:"hljs-property",children:"Label"}),`>\r
`,e(t.span,{className:"xml",get children(){return e(t.span,{className:"hljs-tag",get children(){return["<",e(t.span,{className:"hljs-name",children:"Form.Range"})," />"]}})}}),`
`]}})}})}})]}})),d})(),`
`,e(t.h2,{children:"Api"}),`
`,e(t.h3,{children:"Form.Range"}),`
`,e(t.p,{get children(){return e(t.code,{children:`import { Form } from "solid-bootstrap"'`})}}),`
`,f.cloneNode(!0)]}}function n(o,i){throw new Error("Expected "+(i?"component":"object")+" `"+o+"` to be defined: you likely forgot to import, pass, or provide it.")}export{C as default};
