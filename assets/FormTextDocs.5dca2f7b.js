import{c as e,m as j,o,t as c}from"./index.6a6f2952.js";import{M as p}from"./index.73fc9ca2.js";import{E as s}from"./Example.7bbbad72.js";import{G as y}from"./GithubSource.a49c8ea5.js";import{A as d}from"./Alert.61354961.js";import{F as l}from"./Form.8a28bc04.js";import"./Card.b9284e07.js";import"./FormControl.8a791a6f.js";import"./Layout.f79f1d5a.js";const F=c('<p class="lead"></p>'),_=c("<code>aria-describedby</code>"),T=c('<div class="row gy-5 pt-3"></div>'),C=c(`<table class="bg-white mb-0 table table-striped table-bordered"><thead><tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>ref </td><td><div></div></td><td></td><td><div><p>The FormText <code>ref</code> will be forwarded to the underlying element. Unless the FormText is rendered <code>as</code> a composite component, it will be a DOM node, when resolved.</p></div></td></tr>
<tr><td>as </td><td><div>elementType</div></td><td><code></code></td><td><div><p>You can use a custom element type for this component.</p></div></td></tr>
<tr><td>muted </td><td><div>boolean</div></td><td></td><td><div><p>A convenience prop for add the <code>text-muted</code> class, since it's so commonly used here.</p></div></td></tr>
<tr><td>bsPrefix </td><td><div>string</div></td><td><code>'form-text'</code></td><td><div><p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p></div></td></tr></tbody></table>`);function D(a={}){const{wrapper:i}=Object.assign({},p(),a.components);return i?e(i,j(a,{get children(){return e(h,{})}})):h();function h(){const t=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre",span:"span",h2:"h2",h3:"h3"},p(),a.components);return d||r("Alert",!1),d.Heading||r("Alert.Heading",!0),s||r("Example",!1),s.Code||r("Example.Code",!0),s.Intro||r("Example.Intro",!0),s.Preview||r("Example.Preview",!0),l||r("Form",!1),l.Control||r("Form.Control",!0),l.Label||r("Form.Label",!0),l.Text||r("Form.Text",!0),[e(y,{name:"FormTextDocs.mdx"}),`
`,e(t.h1,{children:"Form text"}),`
`,(()=>{const n=F.cloneNode(!0);return o(n,e(t.p,{children:"Create block-level or inline-level form text."})),n})(),`
`,(()=>{const n=T.cloneNode(!0);return o(n,e(s,{title:"Example",get children(){return[e(s.Intro,{get children(){return[e(t.p,{get children(){return["Block-level help text in forms can be created using ",e(t.code,{children:"<Form.Text>"}),`. Inline help\r
text can be flexibly implemented using any inline HTML element and utility classes\r
like `,e(t.code,{children:".text-muted"}),"."]}}),e(t.p,{get children(){return["Form text below inputs can be styled with ",e(t.code,{children:"<Form.Text>"}),`. This component includes\r
`,e(t.code,{children:"display: block"})," and adds some top margin for easy spacing from the inputs above."]}})]}}),e(s.Preview,{get children(){return[e(l.Label,{htmlFor:"inputPassword5",children:"Password"}),e(l.Control,{type:"password",id:"inputPassword5","aria-describedby":"passwordHelpBlock"}),e(l.Text,{id:"passwordHelpBlock",muted:!0,get children(){return e(t.p,{children:`Your password must be 8-20 characters long, contain letters and numbers, and\r
must not contain spaces, special characters, or emoji.`})}})]}}),e(s.Code,{get children(){return e(t.pre,{get children(){return e(t.code,{className:"hljs language-js",get children(){return["<",e(t.span,{className:"hljs-title class_",children:"Form"}),".",e(t.span,{className:"hljs-property",children:"Label"})," htmlFor=",e(t.span,{className:"hljs-string",children:'"inputPassword5"'}),">",e(t.span,{className:"hljs-title class_",children:"Password"}),"</",e(t.span,{className:"hljs-title class_",children:"Form"}),".",e(t.span,{className:"hljs-property",children:"Label"}),`>\r
`,e(t.span,{className:"xml",get children(){return e(t.span,{className:"hljs-tag",get children(){return["<",e(t.span,{className:"hljs-name",children:"Form.Control"}),`\r
  `,e(t.span,{className:"hljs-attr",children:"type"}),"=",e(t.span,{className:"hljs-string",children:'"password"'}),`\r
  `,e(t.span,{className:"hljs-attr",children:"id"}),"=",e(t.span,{className:"hljs-string",children:'"inputPassword5"'}),`\r
  `,e(t.span,{className:"hljs-attr",children:"aria-describedby"}),"=",e(t.span,{className:"hljs-string",children:'"passwordHelpBlock"'}),`\r
/>`]}})}}),`\r
`,e(t.span,{className:"xml",get children(){return[e(t.span,{className:"hljs-tag",get children(){return["<",e(t.span,{className:"hljs-name",children:"Form.Text"})," ",e(t.span,{className:"hljs-attr",children:"id"}),"=",e(t.span,{className:"hljs-string",children:'"passwordHelpBlock"'})," ",e(t.span,{className:"hljs-attr",children:"muted"}),">"]}}),`\r
  Your password must be 8-20 characters long, contain letters and numbers, and\r
  must not contain spaces, special characters, or emoji.\r
`,e(t.span,{className:"hljs-tag",get children(){return["</",e(t.span,{className:"hljs-name",children:"Form.Text"}),">"]}})]}}),`
`]}})}})}})]}}),null),o(n,e(d,{variant:"warning",get children(){return e(t.p,{get children(){return[e(d.Heading,{children:"Associating help text with form controls"}),`\r
Help text should be explicitly associated with the form control it relates to using\r
the `,_.cloneNode(!0),` attribute. This will ensure that assistive technologies\u2014such\r
as screen readers\u2014will announce this help text when the user focuses or enters\r
the control.`]}})}}),null),n})(),`
`,e(t.h2,{children:"Api"}),`
`,e(t.h3,{children:"Form.Text"}),`
`,e(t.p,{get children(){return e(t.code,{children:`import { Form } from "solid-bootstrap"'`})}}),`
`,(()=>{const n=C.cloneNode(!0),m=n.firstChild,u=m.nextSibling,g=u.firstChild,b=g.nextSibling,f=b.nextSibling,x=f.firstChild,w=x.nextSibling,v=w.nextSibling,N=v.firstChild;return o(N,e(t.code,{children:"<small>"})),n})()]}}function r(a,i){throw new Error("Expected "+(i?"component":"object")+" `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}export{D as default};
